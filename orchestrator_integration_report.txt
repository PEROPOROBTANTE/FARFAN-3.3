================================================================================
REPORTE DETALLADO DE INTEGRACIÓN ORQUESTADOR - FARFAN 3.0
================================================================================

SCRIPTS PRINCIPALES
--------------------------------------------------------------------------------


Analyzer_one.py
===============

  Clase: BatchProcessor
  Métodos (3):
    • __init__
    • export_batch_results
    • process_directory

  Clase: ConfigurationManager
  Métodos (3):
    • __init__
    • load_config
    • save_config

  Clase: DocumentProcessor
  Métodos (3):
    • load_docx
    • load_pdf
    • segment_text

  Clase: MunicipalAnalyzer
  Métodos (2):
    • __init__
    • analyze_document

  Clase: MunicipalOntology
  Métodos (1):
    • __init__

  Clase: PerformanceAnalyzer
  Métodos (2):
    • __init__
    • analyze_performance

  Clase: ResultsExporter
  Métodos (3):
    • export_summary_report
    • export_to_excel
    • export_to_json

  Clase: SemanticAnalyzer
  Métodos (2):
    • __init__
    • extract_semantic_cube

  Clase: TextMiningEngine
  Métodos (2):
    • __init__
    • diagnose_critical_links

  Clase: ValueChainLink
  Métodos (0):

  Funciones standalone (2):
    • example_usage
    • main

causal_proccesor.py
===================

  Clase: BayesianEvidenceIntegrator
  Métodos (3):
    • __init__
    • causal_strength
    • integrate_evidence

  Clase: CausalDimension
  Métodos (0):

  Clase: PDMSection
  Métodos (0):

  Clase: PolicyDocumentAnalyzer
  Métodos (2):
    • __init__
    • analyze

  Clase: SemanticConfig
  Métodos (0):

  Clase: SemanticProcessor
  Métodos (3):
    • __init__
    • chunk_text
    • embed_single

  Funciones standalone (1):
    • main

contradiction_deteccion.py
==========================

  Clase: BayesianConfidenceCalculator
  Métodos (2):
    • __init__
    • calculate_posterior

  Clase: ContradictionEvidence
  Métodos (0):

  Clase: ContradictionType
  Métodos (0):

  Clase: PolicyContradictionDetector
  Métodos (2):
    • __init__
    • detect

  Clase: PolicyDimension
  Métodos (0):

  Clase: PolicyStatement
  Métodos (0):

  Clase: TemporalLogicVerifier
  Métodos (2):
    • __init__
    • verify_temporal_consistency

dereck_beach
============

  Clase: AuditResult
  Métodos (0):

  Clase: BayesianMechanismInference
  Métodos (2):
    • __init__
    • infer_mechanisms

  Clase: BayesianThresholdsConfig
  Métodos (0):

  Clase: BeachEvidentialTest
  Métodos (2):
    • apply_test_logic
    • classify_test

  Clase: CDAFBayesianError
  Métodos (0):

  Clase: CDAFConfigError
  Métodos (0):

  Clase: CDAFConfigSchema
  Métodos (0):

  Clase: CDAFException
  Métodos (2):
    • __init__
    • to_dict

  Clase: CDAFFramework
  Métodos (2):
    • __init__
    • process_document

  Clase: CDAFProcessingError
  Métodos (0):

  Clase: CDAFValidationError
  Métodos (0):

  Clase: CausalExtractor
  Métodos (2):
    • __init__
    • extract_causal_hierarchy

  Clase: CausalInferenceSetup
  Métodos (4):
    • __init__
    • assign_probative_value
    • classify_goal_dynamics
    • identify_failure_points

  Clase: CausalLink
  Métodos (0):

  Clase: Config
  Métodos (0):

  Clase: ConfigLoader
  Métodos (7):
    • __init__
    • check_uncertainty_reduction_criterion
    • get
    • get_bayesian_threshold
    • get_mechanism_prior
    • get_performance_setting
    • update_priors_from_feedback

  Clase: EntityActivity
  Métodos (0):

  Clase: FinancialAuditor
  Métodos (2):
    • __init__
    • trace_financial_allocation

  Clase: GoalClassification
  Métodos (0):

  Clase: MechanismPartExtractor
  Métodos (2):
    • __init__
    • extract_entity_activity

  Clase: MechanismTypeConfig
  Métodos (1):
    • check_sum_to_one

  Clase: MetaNode
  Métodos (0):

  Clase: OperationalizationAuditor
  Métodos (4):
    • __init__
    • audit_evidence_traceability
    • audit_sequence_logic
    • bayesian_counterfactual_audit

  Clase: PDFProcessor
  Métodos (5):
    • __init__
    • extract_sections
    • extract_tables
    • extract_text
    • load_document

  Clase: PerformanceConfig
  Métodos (0):

  Clase: ReportingEngine
  Métodos (5):
    • __init__
    • generate_accountability_matrix
    • generate_causal_diagram
    • generate_causal_model_json
    • generate_confidence_report

  Clase: SelfReflectionConfig
  Métodos (0):

  Funciones standalone (1):
    • main

emebedding_policy.py
====================

  Clase: AdvancedSemanticChunker
  Métodos (2):
    • __init__
    • chunk_document

  Clase: AnalyticalDimension
  Métodos (0):

  Clase: BayesianEvaluation
  Métodos (0):

  Clase: BayesianNumericalAnalyzer
  Métodos (3):
    • __init__
    • compare_policies
    • evaluate_policy_metric

  Clase: ChunkingConfig
  Métodos (0):

  Clase: EmbeddingProtocol
  Métodos (1):
    • encode

  Clase: PDQIdentifier
  Métodos (0):

  Clase: PolicyAnalysisEmbedder
  Métodos (7):
    • __init__
    • compare_policy_interventions
    • evaluate_policy_numerical_consistency
    • generate_pdq_report
    • get_diagnostics
    • process_document
    • semantic_search

  Clase: PolicyCrossEncoderReranker
  Métodos (2):
    • __init__
    • rerank

  Clase: PolicyDomain
  Métodos (0):

  Clase: PolicyEmbeddingConfig
  Métodos (0):

  Clase: SemanticChunk
  Métodos (0):

  Funciones standalone (2):
    • create_policy_embedder
    • example_pdm_analysis

financiero_viabilidad_tablas.py
===============================

  Clase: CausalDAG
  Métodos (0):

  Clase: CausalEdge
  Métodos (0):

  Clase: CausalEffect
  Métodos (0):

  Clase: CausalNode
  Métodos (0):

  Clase: ColombianMunicipalContext
  Métodos (0):

  Clase: CounterfactualScenario
  Métodos (0):

  Clase: ExtractedTable
  Métodos (0):

  Clase: FinancialIndicator
  Métodos (0):

  Clase: PDETAnalysisException
  Métodos (0):

  Clase: PDETMunicipalPlanAnalyzer
  Métodos (12):
    • __init__
    • analyze_financial_feasibility
    • analyze_municipal_plan
    • calculate_quality_score
    • construct_causal_dag
    • estimate_causal_effects
    • export_causal_network
    • extract_tables
    • generate_counterfactuals
    • generate_executive_report
    • identify_responsible_entities
    • sensitivity_analysis

  Clase: QualityScore
  Métodos (0):

  Clase: ResponsibleEntity
  Métodos (0):

  Funciones standalone (3):
    • main_example
    • setup_logging
    • validate_pdf_path

policy_processor.py
===================

  Clase: AdvancedTextSanitizer
  Métodos (2):
    • __init__
    • sanitize

  Clase: BayesianEvidenceScorer
  Métodos (2):
    • __init__
    • compute_evidence_score

  Clase: CausalDimension
  Métodos (0):

  Clase: EvidenceBundle
  Métodos (1):
    • to_dict

  Clase: IndustrialPolicyProcessor
  Métodos (3):
    • __init__
    • export_results
    • process

  Clase: PolicyAnalysisPipeline
  Métodos (3):
    • __init__
    • analyze_file
    • analyze_text

  Clase: PolicyTextProcessor
  Métodos (5):
    • __init__
    • compile_pattern
    • extract_contextual_window
    • normalize_unicode
    • segment_into_sentences

  Clase: ProcessorConfig
  Métodos (2):
    • from_legacy
    • validate

  Clase: ResilientFileHandler
  Métodos (2):
    • read_text
    • write_text

  Funciones standalone (2):
    • create_policy_processor
    • main

policy_segmenter.py
===================

  Clase: BayesianBoundaryScorer
  Métodos (2):
    • __init__
    • score_boundaries

  Clase: DPSegmentOptimizer
  Métodos (2):
    • __init__
    • optimize_cuts

  Clase: DocumentSegmenter
  Métodos (3):
    • __init__
    • get_segmentation_report
    • segment

  Clase: SectionType
  Métodos (0):

  Clase: SegmentMetrics
  Métodos (0):

  Clase: SegmentationStats
  Métodos (0):

  Clase: SegmenterConfig
  Métodos (0):

  Clase: SpanishSentenceSegmenter
  Métodos (1):
    • segment

  Clase: StructureDetector
  Métodos (1):
    • detect_structures

  Funciones standalone (2):
    • create_segmenter
    • example_pdm_segmentation

semantic_chunking_policy.py
===========================

  Clase: BayesianEvidenceIntegrator
  Métodos (3):
    • __init__
    • causal_strength
    • integrate_evidence

  Clase: CausalDimension
  Métodos (0):

  Clase: PDMSection
  Métodos (0):

  Clase: PolicyDocumentAnalyzer
  Métodos (2):
    • __init__
    • analyze

  Clase: SemanticConfig
  Métodos (0):

  Clase: SemanticProcessor
  Métodos (3):
    • __init__
    • chunk_text
    • embed_single

  Funciones standalone (1):
    • main

teoria_cambio.py
================

  Clase: AdvancedDAGValidator
  Métodos (5):
    • __init__
    • add_edge
    • add_node
    • calculate_acyclicity_pvalue
    • get_graph_stats

  Clase: AdvancedGraphNode
  Métodos (0):

  Clase: CategoriaCausal
  Métodos (0):

  Clase: GraphType
  Métodos (0):

  Clase: IndustrialGradeValidator
  Métodos (6):
    • __init__
    • execute_suite
    • run_performance_benchmarks
    • validate_causal_categories
    • validate_connection_matrix
    • validate_engine_readiness

  Clase: MonteCarloAdvancedResult
  Métodos (0):

  Clase: TeoriaCambio
  Métodos (3):
    • __init__
    • construir_grafo_causal
    • validacion_completa

  Clase: ValidacionResultado
  Métodos (0):

  Clase: ValidationMetric
  Métodos (0):

  Funciones standalone (3):
    • configure_logging
    • create_policy_theory_of_change_graph
    • main


================================================================================
ORQUESTADOR
--------------------------------------------------------------------------------


orchestrator/choreographer.py
=============================

  Clase: ExecutionChoreographer
  Métodos (3):
    • __init__
    • execute_for_question
    • get_execution_statistics

  Clase: ExecutionResult
  Métodos (0):

  Clase: ExecutionStatus
  Métodos (0):

orchestrator/circuit_breaker.py
===============================

  Clase: CircuitBreaker
  Métodos (10):
    • __init__
    • call
    • get_all_metrics
    • get_degraded_modules
    • get_health_summary
    • get_metrics
    • get_state
    • get_unavailable_modules
    • is_available
    • reset

  Clase: CircuitBreakerError
  Métodos (0):

  Clase: CircuitMetrics
  Métodos (2):
    • failure_rate
    • success_rate

  Clase: CircuitState
  Métodos (0):

  Funciones standalone (2):
    • create_module_specific_fallback
    • default_fallback

orchestrator/config.py
======================

  Clase: ModuleConfig
  Métodos (0):

  Clase: OrchestratorConfig
  Métodos (0):

orchestrator/core_orchestrator.py
=================================

  Clase: FARFANOrchestrator
  Métodos (4):
    • __init__
    • analyze_batch
    • analyze_single_plan
    • get_system_health

orchestrator/dashboard_generator.py
===================================

  Clase: DashboardDataGenerator
  Métodos (3):
    • __init__
    • generate_batch_dashboard
    • generate_dashboard_data

orchestrator/module_adapters.py
===============================

  Clase: AnalyzerOneAdapter
  Métodos (2):
    • __init__
    • execute

  Clase: CausalProcessorAdapter
  Métodos (2):
    • __init__
    • execute

  Clase: ContradictionDetectorAdapter
  Métodos (2):
    • __init__
    • execute

  Clase: DerekBeachAdapter
  Métodos (2):
    • __init__
    • execute

  Clase: EmbeddingPolicyAdapter
  Métodos (2):
    • __init__
    • execute

  Clase: FinancialAnalyzerAdapter
  Métodos (2):
    • __init__
    • execute

  Clase: ModuleAdapterRegistry
  Métodos (3):
    • __init__
    • execute_module_method
    • get_adapter

  Clase: ModuleResult
  Métodos (0):

  Clase: PolicyProcessorAdapter
  Métodos (2):
    • __init__
    • execute

  Clase: PolicySegmenterAdapter
  Métodos (2):
    • __init__
    • execute

orchestrator/question_router.py
===============================

  Clase: Question
  Métodos (1):
    • canonical_id

  Clase: QuestionRouter
  Métodos (7):
    • __init__
    • get_all_questions_for_dimension
    • get_all_questions_for_policy_area
    • get_execution_order
    • get_modules_for_question
    • get_question
    • get_statistics

orchestrator/report_assembly.py
===============================

  Clase: MacroLevelConvergence
  Métodos (0):

  Clase: MesoLevelCluster
  Métodos (0):

  Clase: MicroLevelAnswer
  Métodos (0):

  Clase: ReportAssembler
  Métodos (5):
    • __init__
    • export_full_report
    • generate_macro_convergence
    • generate_meso_cluster
    • generate_micro_answer
