{
  "metadata": {
    "generated_at": "2024-01-15T10:00:00",
    "analyzer_file": "Analyzer_one.py",
    "adapter_file": "orchestrator/module_adapters.py",
    "adapter_class": "AnalyzerOneAdapter",
    "analysis_version": "1.0.0",
    "description": "Complete invocation audit of Analyzer_one.py methods cross-referenced with AnalyzerOneAdapter"
  },
  "statistics": {
    "total_classes_in_analyzer": 10,
    "total_methods_cataloged": 39,
    "static_methods": 6,
    "class_methods": 0,
    "instance_methods": 23,
    "constructors": 10,
    "total_violations_found": 5,
    "high_severity_violations": 3,
    "medium_severity_violations": 2,
    "low_severity_violations": 0
  },
  "method_inventory": {
    "ValueChainLink": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 77,
          "parameters": ["name", "instruments", "mediators", "outputs", "outcomes", "bottlenecks", "lead_time_days", "conversion_rates", "capacity_constraints"],
          "correct_invocation_pattern": "ValueChainLink(name, instruments, mediators, outputs, outcomes, bottlenecks, lead_time_days, conversion_rates, capacity_constraints)"
        }
      ]
    },
    "MunicipalOntology": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 92,
          "parameters": ["self"],
          "correct_invocation_pattern": "MunicipalOntology()"
        }
      ]
    },
    "SemanticAnalyzer": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 151,
          "parameters": ["self", "ontology"],
          "correct_invocation_pattern": "SemanticAnalyzer(ontology)"
        }
      ],
      "instance_methods": [
        {
          "name": "extract_semantic_cube",
          "line_number": 158,
          "parameters": ["self", "document_segments"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer.extract_semantic_cube(document_segments)"
        }
      ],
      "private_methods": [
        {
          "name": "_empty_semantic_cube",
          "line_number": 212,
          "parameters": ["self"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer._empty_semantic_cube()"
        },
        {
          "name": "_vectorize_segments",
          "line_number": 231,
          "parameters": ["self", "segments"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer._vectorize_segments(segments)"
        },
        {
          "name": "_process_segment",
          "line_number": 244,
          "parameters": ["self", "segment", "idx", "vector"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer._process_segment(segment, idx, vector)"
        },
        {
          "name": "_classify_value_chain_link",
          "line_number": 282,
          "parameters": ["self", "segment"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer._classify_value_chain_link(segment)"
        },
        {
          "name": "_classify_policy_domain",
          "line_number": 303,
          "parameters": ["self", "segment"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer._classify_policy_domain(segment)"
        },
        {
          "name": "_classify_cross_cutting_themes",
          "line_number": 317,
          "parameters": ["self", "segment"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer._classify_cross_cutting_themes(segment)"
        },
        {
          "name": "_calculate_semantic_complexity",
          "line_number": 331,
          "parameters": ["self", "semantic_cube"],
          "correct_invocation_pattern": "semanticanalyzer = SemanticAnalyzer(ontology); semanticanalyzer._calculate_semantic_complexity(semantic_cube)"
        }
      ]
    },
    "PerformanceAnalyzer": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 381,
          "parameters": ["self", "ontology"],
          "correct_invocation_pattern": "PerformanceAnalyzer(ontology)"
        }
      ],
      "instance_methods": [
        {
          "name": "analyze_performance",
          "line_number": 388,
          "parameters": ["self", "semantic_cube"],
          "correct_invocation_pattern": "performanceanalyzer = PerformanceAnalyzer(ontology); performanceanalyzer.analyze_performance(semantic_cube)"
        }
      ],
      "private_methods": [
        {
          "name": "_calculate_throughput_metrics",
          "line_number": 423,
          "parameters": ["self", "segments", "link_config"],
          "correct_invocation_pattern": "performanceanalyzer = PerformanceAnalyzer(ontology); performanceanalyzer._calculate_throughput_metrics(segments, link_config)"
        },
        {
          "name": "_detect_bottlenecks",
          "line_number": 462,
          "parameters": ["self", "segments", "link_config"],
          "correct_invocation_pattern": "performanceanalyzer = PerformanceAnalyzer(ontology); performanceanalyzer._detect_bottlenecks(segments, link_config)"
        },
        {
          "name": "_calculate_loss_functions",
          "line_number": 496,
          "parameters": ["self", "metrics", "link_config"],
          "correct_invocation_pattern": "performanceanalyzer = PerformanceAnalyzer(ontology); performanceanalyzer._calculate_loss_functions(metrics, link_config)"
        },
        {
          "name": "_generate_recommendations",
          "line_number": 533,
          "parameters": ["self", "performance_analysis"],
          "correct_invocation_pattern": "performanceanalyzer = PerformanceAnalyzer(ontology); performanceanalyzer._generate_recommendations(performance_analysis)"
        }
      ]
    },
    "TextMiningEngine": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 557,
          "parameters": ["self", "ontology"],
          "correct_invocation_pattern": "TextMiningEngine(ontology)"
        }
      ],
      "instance_methods": [
        {
          "name": "diagnose_critical_links",
          "line_number": 574,
          "parameters": ["self", "semantic_cube", "performance_analysis"],
          "correct_invocation_pattern": "textminingengine = TextMiningEngine(ontology); textminingengine.diagnose_critical_links(semantic_cube, performance_analysis)"
        }
      ],
      "private_methods": [
        {
          "name": "_identify_critical_links",
          "line_number": 615,
          "parameters": ["self", "performance_analysis"],
          "correct_invocation_pattern": "textminingengine = TextMiningEngine(ontology); textminingengine._identify_critical_links(performance_analysis)"
        },
        {
          "name": "_analyze_link_text",
          "line_number": 640,
          "parameters": ["self", "segments"],
          "correct_invocation_pattern": "textminingengine = TextMiningEngine(ontology); textminingengine._analyze_link_text(segments)"
        },
        {
          "name": "_assess_risks",
          "line_number": 675,
          "parameters": ["self", "segments", "text_analysis"],
          "correct_invocation_pattern": "textminingengine = TextMiningEngine(ontology); textminingengine._assess_risks(segments, text_analysis)"
        },
        {
          "name": "_generate_interventions",
          "line_number": 703,
          "parameters": ["self", "link_name", "risk_assessment", "text_analysis"],
          "correct_invocation_pattern": "textminingengine = TextMiningEngine(ontology); textminingengine._generate_interventions(link_name, risk_assessment, text_analysis)"
        }
      ]
    },
    "MunicipalAnalyzer": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 739,
          "parameters": ["self"],
          "correct_invocation_pattern": "MunicipalAnalyzer()"
        }
      ],
      "instance_methods": [
        {
          "name": "analyze_document",
          "line_number": 747,
          "parameters": ["self", "document_path"],
          "correct_invocation_pattern": "municipalanalyzer = MunicipalAnalyzer(); municipalanalyzer.analyze_document(document_path)"
        }
      ],
      "private_methods": [
        {
          "name": "_load_document",
          "line_number": 784,
          "parameters": ["self", "document_path"],
          "correct_invocation_pattern": "municipalanalyzer = MunicipalAnalyzer(); municipalanalyzer._load_document(document_path)"
        },
        {
          "name": "_generate_summary",
          "line_number": 807,
          "parameters": ["self", "semantic_cube", "performance_analysis", "critical_diagnosis"],
          "correct_invocation_pattern": "municipalanalyzer = MunicipalAnalyzer(); municipalanalyzer._generate_summary(semantic_cube, performance_analysis, critical_diagnosis)"
        }
      ]
    },
    "DocumentProcessor": {
      "staticmethods": [
        {
          "name": "load_pdf",
          "line_number": 984,
          "parameters": ["pdf_path"],
          "correct_invocation_pattern": "DocumentProcessor.load_pdf(pdf_path)"
        },
        {
          "name": "load_docx",
          "line_number": 1000,
          "parameters": ["docx_path"],
          "correct_invocation_pattern": "DocumentProcessor.load_docx(docx_path)"
        },
        {
          "name": "segment_text",
          "line_number": 1016,
          "parameters": ["text", "method"],
          "correct_invocation_pattern": "DocumentProcessor.segment_text(text, method)"
        }
      ]
    },
    "ResultsExporter": {
      "staticmethods": [
        {
          "name": "export_to_json",
          "line_number": 1066,
          "parameters": ["results", "output_path"],
          "correct_invocation_pattern": "ResultsExporter.export_to_json(results, output_path)"
        },
        {
          "name": "export_to_excel",
          "line_number": 1076,
          "parameters": ["results", "output_path"],
          "correct_invocation_pattern": "ResultsExporter.export_to_excel(results, output_path)"
        },
        {
          "name": "export_summary_report",
          "line_number": 1146,
          "parameters": ["results", "output_path"],
          "correct_invocation_pattern": "ResultsExporter.export_summary_report(results, output_path)"
        }
      ]
    },
    "ConfigurationManager": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 1255,
          "parameters": ["self", "config_path"],
          "correct_invocation_pattern": "ConfigurationManager(config_path)"
        }
      ],
      "instance_methods": [
        {
          "name": "load_config",
          "line_number": 1261,
          "parameters": ["self"],
          "correct_invocation_pattern": "configurationmanager = ConfigurationManager(config_path); configurationmanager.load_config()"
        },
        {
          "name": "save_config",
          "line_number": 1276,
          "parameters": ["self", "config"],
          "correct_invocation_pattern": "configurationmanager = ConfigurationManager(config_path); configurationmanager.save_config(config)"
        },
        {
          "name": "validate_config",
          "line_number": 1284,
          "parameters": ["self", "config"],
          "correct_invocation_pattern": "configurationmanager = ConfigurationManager(config_path); configurationmanager.validate_config(config)"
        }
      ]
    },
    "BatchProcessor": {
      "constructors": [
        {
          "name": "__init__",
          "line_number": 1306,
          "parameters": ["self", "analyzer"],
          "correct_invocation_pattern": "BatchProcessor(analyzer)"
        }
      ],
      "instance_methods": [
        {
          "name": "process_directory",
          "line_number": 1310,
          "parameters": ["self", "directory_path", "pattern"],
          "correct_invocation_pattern": "batchprocessor = BatchProcessor(analyzer); batchprocessor.process_directory(directory_path, pattern)"
        },
        {
          "name": "export_batch_results",
          "line_number": 1358,
          "parameters": ["self", "batch_results", "output_dir"],
          "correct_invocation_pattern": "batchprocessor = BatchProcessor(analyzer); batchprocessor.export_batch_results(batch_results, output_dir)"
        }
      ],
      "private_methods": [
        {
          "name": "_create_batch_summary",
          "line_number": 1371,
          "parameters": ["self", "batch_results", "output_path"],
          "correct_invocation_pattern": "batchprocessor = BatchProcessor(analyzer); batchprocessor._create_batch_summary(batch_results, output_path)"
        }
      ]
    }
  },
  "correction_matrix": [
    {
      "violation_type": "missing_required_parameter",
      "severity": "high",
      "location": {
        "file": "orchestrator/module_adapters.py",
        "class": "AnalyzerOneAdapter",
        "line_number": 1730,
        "line_content": "        analyzer = self.SemanticAnalyzer()"
      },
      "issue": {
        "class_name": "SemanticAnalyzer",
        "method_name": "__init__",
        "description": "SemanticAnalyzer constructor requires 'ontology' parameter but called without it"
      },
      "recommendation": "Use: ontology = self.MunicipalOntology(); analyzer = self.SemanticAnalyzer(ontology)"
    },
    {
      "violation_type": "missing_required_parameter",
      "severity": "high",
      "location": {
        "file": "orchestrator/module_adapters.py",
        "class": "AnalyzerOneAdapter",
        "line_number": 1750,
        "line_content": "        analyzer = self.PerformanceAnalyzer()"
      },
      "issue": {
        "class_name": "PerformanceAnalyzer",
        "method_name": "__init__",
        "description": "PerformanceAnalyzer constructor requires 'ontology' parameter but called without it"
      },
      "recommendation": "Use: ontology = self.MunicipalOntology(); analyzer = self.PerformanceAnalyzer(ontology)"
    },
    {
      "violation_type": "incorrect_parameter",
      "severity": "high",
      "location": {
        "file": "orchestrator/module_adapters.py",
        "class": "AnalyzerOneAdapter",
        "line_number": 1820,
        "line_content": "        complexity = analyzer._calculate_semantic_complexity(segment)"
      },
      "issue": {
        "class_name": "SemanticAnalyzer",
        "method_name": "_calculate_semantic_complexity",
        "description": "Method expects 'semantic_cube' (Dict) parameter but receives 'segment' (str)"
      },
      "recommendation": "Use: analyzer._calculate_semantic_complexity(semantic_cube) with a properly structured semantic cube dictionary"
    },
    {
      "violation_type": "incorrect_static_invocation",
      "severity": "medium",
      "location": {
        "file": "orchestrator/module_adapters.py",
        "class": "AnalyzerOneAdapter",
        "line_number": 1880,
        "line_content": "        text = self.DocumentProcessor().load_pdf(file_path)"
      },
      "issue": {
        "class_name": "DocumentProcessor",
        "method_name": "load_pdf",
        "description": "Static method 'load_pdf' called on instantiated class (unnecessary instantiation)"
      },
      "recommendation": "Use: text = self.DocumentProcessor.load_pdf(file_path) without parentheses after class name"
    },
    {
      "violation_type": "incorrect_static_invocation",
      "severity": "medium",
      "location": {
        "file": "orchestrator/module_adapters.py",
        "class": "AnalyzerOneAdapter",
        "line_number": 1900,
        "line_content": "        self.ResultsExporter().export_to_json(results, path)"
      },
      "issue": {
        "class_name": "ResultsExporter",
        "method_name": "export_to_json",
        "description": "Static method 'export_to_json' called on instantiated class (unnecessary instantiation)"
      },
      "recommendation": "Use: self.ResultsExporter.export_to_json(results, path) without parentheses after class name"
    }
  ]
}
