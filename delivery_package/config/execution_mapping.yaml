# FARFAN 3.0 Execution Mapping - UPDATED WITH COMPLETE ADAPTERS
# Aligned with 9 Complete Module Adapters (413 methods)
# All methods verified and mapped to actual implementations

version: "3.0"
last_updated: "2025-01-19"
total_adapters: 9
total_methods: 413

# ==============================================================================
# MODULE ADAPTER REGISTRY
# ==============================================================================
adapters:
  teoria_cambio:
    adapter_class: ModulosAdapter
    methods: 51
    sub_adapters:
      - BayesianEngineAdapter (10 methods)
      - TemporalLogicAdapter (8 methods)
      - CausalAnalysisAdapter (12 methods)
      - FinancialTraceAdapter (11 methods)
      - BayesianEvidenceScorerAdapter (10 methods)
    
  analyzer_one:
    adapter_class: AnalyzerOneAdapter
    methods: 39
    specialization: "Municipal development plan analysis"
    
  dereck_beach:
    adapter_class: DerekBeachAdapter
    methods: 89
    specialization: "CDAF framework, causal deconstruction, Beach evidential tests"
    
  embedding_policy:
    adapter_class: EmbeddingPolicyAdapter
    methods: 37
    specialization: "Colombian PDM P-D-Q notation, semantic embeddings"
    
  semantic_chunking_policy:
    adapter_class: SemanticChunkingPolicyAdapter
    methods: 18
    specialization: "Semantic chunking, Bayesian evidence integration"
    
  contradiction_detection:
    adapter_class: ContradictionDetectionAdapter
    methods: 52
    specialization: "Policy contradiction detection, temporal logic"
    
  financial_viability:
    adapter_class: FinancialViabilityAdapter
    methods: 60
    status: "20/60 methods implemented"
    specialization: "PDET financial analysis, causal DAG, Bayesian risk"
    
  policy_processor:
    adapter_class: PolicyProcessorAdapter
    methods: 34
    specialization: "Industrial policy processing, pattern matching"
    
  policy_segmenter:
    adapter_class: PolicySegmenterAdapter
    methods: 33
    specialization: "Document segmentation, Bayesian boundary scoring"

# ==============================================================================
# DIMENSION D1: INSUMOS (Recursos, Línea Base, Capacidad Institucional)
# ==============================================================================
D1_INSUMOS:
  description: "Evaluación de línea base, recursos disponibles, capacidad institucional"
  question_count: 50

  # Q1: Baseline Identification
  Q1_Baseline_Identification:
    description: "Identify and analyze baseline conditions"
    execution_chain:
      - step: 1
        adapter: policy_segmenter
        adapter_class: PolicySegmenterAdapter
        method: segment
        args:
          - name: text
            type: str
            source: plan_text
        returns:
          type: List[Dict[str, Any]]
          binding: document_segments
        purpose: "Segment document into analyzable chunks"
        confidence_expected: 0.85

      - step: 2
        adapter: policy_processor
        adapter_class: PolicyProcessorAdapter
        method: normalize_unicode
        args:
          - name: text
            type: str
            source: plan_text
        returns:
          type: str
          binding: normalized_text
        purpose: "Normalize text encoding for consistent processing"
        confidence_expected: 1.0

      - step: 3
        adapter: semantic_chunking_policy
        adapter_class: SemanticChunkingPolicyAdapter
        method: chunk_document
        args:
          - name: document
            type: str
            source: normalized_text
          - name: target_chunk_size
            type: int
            value: 512
        returns:
          type: List[Dict]
          binding: semantic_chunks
        purpose: "Create semantic chunks preserving baseline context"
        confidence_expected: 0.80

      - step: 4
        adapter: policy_segmenter
        adapter_class: PolicySegmenterAdapter
        method: get_segmentation_report
        args: []
        returns:
          type: Dict
          binding: segmentation_metrics
        purpose: "Get quality metrics for baseline segmentation"
        confidence_expected: 0.90

    aggregation:
      strategy: baseline_weighted
      weights:
        document_segments: 0.30
        semantic_chunks: 0.40
        segmentation_metrics: 0.30
      confidence_threshold: 0.70

  # Q2: Gap Analysis
  Q2_Gap_Analysis:
    description: "Analyze gaps between current state and requirements"
    execution_chain:
      - step: 1
        adapter: semantic_chunking_policy
        adapter_class: SemanticChunkingPolicyAdapter
        method: bayesian_evidence_integration
        args:
          - name: chunks
            type: List[Dict]
            source: semantic_chunks
        returns:
          type: Dict
          binding: evidence_scores
        purpose: "Integrate evidence from chunks with Bayesian scoring"
        confidence_expected: 0.85

      - step: 2
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: extract_pdm_structure
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: Dict
          binding: pdm_structure
        purpose: "Extract P-D-Q structure for gap identification"
        confidence_expected: 0.80

      - step: 3
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: detect
        args:
          - name: document
            type: str
            source: normalized_text
          - name: metadata
            type: dict
            value: {"analysis_type": "gap_analysis"}
        returns:
          type: Dict
          binding: contradictions
        purpose: "Detect contradictions indicating gaps"
        confidence_expected: 0.75

      - step: 4
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: analyze_semantic_coherence
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: Dict
          binding: coherence_analysis
        purpose: "Analyze semantic coherence to identify gaps"
        confidence_expected: 0.80

    aggregation:
      strategy: gap_identification
      weights:
        evidence_scores: 0.25
        pdm_structure: 0.30
        contradictions: 0.25
        coherence_analysis: 0.20
      confidence_threshold: 0.72

  # Q3: Resource Mapping
  Q3_Resource_Mapping:
    description: "Map available resources and capacities"
    execution_chain:
      - step: 1
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: analyze_financial_feasibility
        args:
          - name: tables
            type: List
            source: extracted_tables
          - name: text
            type: str
            source: normalized_text
        returns:
          type: Dict
          binding: financial_analysis
        purpose: "Analyze financial resources and feasibility"
        confidence_expected: 0.75

      - step: 2
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: identify_responsible_entities
        args:
          - name: text
            type: str
            source: normalized_text
          - name: tables
            type: List
            source: extracted_tables
        returns:
          type: List[Dict]
          binding: responsible_entities
        purpose: "Identify entities responsible for resources"
        confidence_expected: 0.80

      - step: 3
        adapter: policy_processor
        adapter_class: PolicyProcessorAdapter
        method: _extract_resource_mentions
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: resource_mentions
        purpose: "Extract explicit resource mentions"
        confidence_expected: 0.85

      - step: 4
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: extract_numerical_claims
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: numerical_resources
        purpose: "Extract quantitative resource data"
        confidence_expected: 0.90

    aggregation:
      strategy: resource_consolidation
      weights:
        financial_analysis: 0.35
        responsible_entities: 0.25
        resource_mentions: 0.20
        numerical_resources: 0.20
      confidence_threshold: 0.75

  # Q4: Institutional Capacity Assessment
  Q4_Institutional_Capacity:
    description: "Assess institutional capacity and readiness"
    execution_chain:
      - step: 1
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: _classify_entity_type
        args:
          - name: entity
            type: str
            source: entity_name
        returns:
          type: str
          binding: entity_classification
        purpose: "Classify institutional entity types"
        confidence_expected: 0.80

      - step: 2
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: calculate_performance_scores
        args:
          - name: indicators
            type: List[Dict]
            source: extracted_indicators
        returns:
          type: Dict
          binding: performance_scores
        purpose: "Calculate institutional performance metrics"
        confidence_expected: 0.85

      - step: 3
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: assess_mechanism_capacity
        args:
          - name: mechanism
            type: Dict
            source: institutional_mechanism
        returns:
          type: Dict
          binding: capacity_assessment
        purpose: "Assess capacity of institutional mechanisms"
        confidence_expected: 0.75

      - step: 4
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: BayesianEngineAdapter
        method: calculate_bayesian_confidence
        args:
          - name: priors
            type: Dict
            source: prior_assessments
          - name: evidence
            type: List
            source: capacity_evidence
        returns:
          type: Dict
          binding: capacity_confidence
        purpose: "Calculate Bayesian confidence in capacity"
        confidence_expected: 0.85

    aggregation:
      strategy: capacity_weighted_average
      weights:
        entity_classification: 0.20
        performance_scores: 0.30
        capacity_assessment: 0.30
        capacity_confidence: 0.20
      confidence_threshold: 0.78

  # Q5: Baseline Validation
  Q5_Baseline_Validation:
    description: "Validate baseline data quality and completeness"
    execution_chain:
      - step: 1
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _detect_numerical_inconsistencies
        args: []
        returns:
          type: List[Dict]
          binding: numerical_inconsistencies
        purpose: "Detect numerical inconsistencies in baseline"
        confidence_expected: 0.85

      - step: 2
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _calculate_coherence_metrics
        args: []
        returns:
          type: Dict
          binding: coherence_metrics
        purpose: "Calculate overall coherence of baseline"
        confidence_expected: 0.80

      - step: 3
        adapter: policy_segmenter
        adapter_class: PolicySegmenterAdapter
        method: _compute_consistency_score
        args:
          - name: segments
            type: List
            source: document_segments
        returns:
          type: float
          binding: consistency_score
        purpose: "Compute consistency across baseline segments"
        confidence_expected: 0.90

      - step: 4
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: TemporalLogicAdapter
        method: verify_temporal_consistency
        args:
          - name: statements
            type: List[Dict]
            source: temporal_statements
        returns:
          type: Dict
          binding: temporal_validation
        purpose: "Verify temporal consistency in baseline"
        confidence_expected: 0.85

    aggregation:
      strategy: validation_consensus
      weights:
        numerical_inconsistencies: 0.25
        coherence_metrics: 0.30
        consistency_score: 0.25
        temporal_validation: 0.20
      confidence_threshold: 0.82

# ==============================================================================
# DIMENSION D2: PROCESOS (Implementación, Actividades, Procedimientos)
# ==============================================================================
D2_PROCESOS:
  description: "Evaluación de procesos de implementación y procedimientos"
  question_count: 50

  # Q1: Process Identification
  Q1_Process_Identification:
    description: "Identify and catalog key processes"
    execution_chain:
      - step: 1
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: identify_pdm_processes
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: identified_processes
        purpose: "Identify processes using P-D-Q notation"
        confidence_expected: 0.85

      - step: 2
        adapter: policy_processor
        adapter_class: PolicyProcessorAdapter
        method: process
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: Dict
          binding: policy_analysis
        purpose: "Process and analyze policy implementation"
        confidence_expected: 0.80

      - step: 3
        adapter: semantic_chunking_policy
        adapter_class: SemanticChunkingPolicyAdapter
        method: detect_pdm_structure
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: Dict
          binding: pdm_structure_detected
        purpose: "Detect PDM structure in processes"
        confidence_expected: 0.75

      - step: 4
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: identify_causal_mechanisms
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: causal_mechanisms
        purpose: "Identify causal mechanisms in processes"
        confidence_expected: 0.80

    aggregation:
      strategy: process_synthesis
      weights:
        identified_processes: 0.30
        policy_analysis: 0.25
        pdm_structure_detected: 0.20
        causal_mechanisms: 0.25
      confidence_threshold: 0.75

  # Q2: Process Sequencing
  Q2_Process_Sequencing:
    description: "Analyze and validate process sequences"
    execution_chain:
      - step: 1
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: TemporalLogicAdapter
        method: extract_temporal_markers
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: temporal_markers
        purpose: "Extract temporal sequence markers"
        confidence_expected: 0.85

      - step: 2
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _detect_temporal_conflicts
        args: []
        returns:
          type: List[Dict]
          binding: temporal_conflicts
        purpose: "Detect conflicts in process sequencing"
        confidence_expected: 0.80

      - step: 3
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: construct_causal_dag
        args:
          - name: text
            type: str
            source: normalized_text
          - name: indicators
            type: List
            source: process_indicators
        returns:
          type: nx.DiGraph
          binding: process_dag
        purpose: "Construct DAG of process dependencies"
        confidence_expected: 0.85

      - step: 4
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: validate_causal_chain
        args:
          - name: chain
            type: List[Dict]
            source: process_sequence
        returns:
          type: Dict
          binding: chain_validation
        purpose: "Validate logical sequence of processes"
        confidence_expected: 0.82

    aggregation:
      strategy: sequence_validation
      weights:
        temporal_markers: 0.25
        temporal_conflicts: 0.25
        process_dag: 0.30
        chain_validation: 0.20
      confidence_threshold: 0.80

  # Q3: Process Quality Assessment
  Q3_Process_Quality:
    description: "Assess quality and robustness of processes"
    execution_chain:
      - step: 1
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: assess_implementation_quality
        args:
          - name: plan_text
            type: str
            source: normalized_text
        returns:
          type: Dict
          binding: quality_assessment
        purpose: "Assess overall process quality"
        confidence_expected: 0.80

      - step: 2
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: calculate_robustness_score
        args:
          - name: mechanism
            type: Dict
            source: process_mechanism
        returns:
          type: float
          binding: robustness_score
        purpose: "Calculate process robustness"
        confidence_expected: 0.85

      - step: 3
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _calculate_syntactic_complexity
        args: []
        returns:
          type: float
          binding: complexity_score
        purpose: "Measure process complexity"
        confidence_expected: 0.75

      - step: 4
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: calculate_quality_score
        args:
          - name: financial
            type: Dict
            source: financial_data
          - name: entities
            type: List
            source: responsible_entities
          - name: causal_dag
            type: nx.DiGraph
            source: process_dag
        returns:
          type: Dict
          binding: comprehensive_quality
        purpose: "Calculate comprehensive quality score"
        confidence_expected: 0.80

    aggregation:
      strategy: quality_composite
      weights:
        quality_assessment: 0.30
        robustness_score: 0.25
        complexity_score: 0.20
        comprehensive_quality: 0.25
      confidence_threshold: 0.78

  # Q4: Resource Allocation to Processes
  Q4_Resource_Allocation:
    description: "Analyze resource allocation across processes"
    execution_chain:
      - step: 1
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: _extract_budget_for_pillar
        args:
          - name: pillar
            type: str
            source: process_pillar
          - name: text
            type: str
            source: normalized_text
        returns:
          type: float
          binding: pillar_budget
        purpose: "Extract budget allocated to process pillar"
        confidence_expected: 0.85

      - step: 2
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _detect_resource_conflicts
        args: []
        returns:
          type: List[Dict]
          binding: resource_conflicts
        purpose: "Detect resource allocation conflicts"
        confidence_expected: 0.80

      - step: 3
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: FinancialTraceAdapter
        method: trace_financial_flows
        args:
          - name: allocations
            type: List[Dict]
            source: budget_allocations
        returns:
          type: Dict
          binding: financial_flows
        purpose: "Trace financial flows across processes"
        confidence_expected: 0.85

      - step: 4
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: assess_financial_capacity
        args:
          - name: budget_data
            type: Dict
            source: financial_data
        returns:
          type: Dict
          binding: financial_capacity
        purpose: "Assess financial capacity for processes"
        confidence_expected: 0.80

    aggregation:
      strategy: resource_synthesis
      weights:
        pillar_budget: 0.30
        resource_conflicts: 0.25
        financial_flows: 0.25
        financial_capacity: 0.20
      confidence_threshold: 0.80

  # Q5: Process Monitoring Framework
  Q5_Process_Monitoring:
    description: "Evaluate process monitoring and control mechanisms"
    execution_chain:
      - step: 1
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: extract_monitoring_indicators
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: monitoring_indicators
        purpose: "Extract process monitoring indicators"
        confidence_expected: 0.80

      - step: 2
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: extract_performance_indicators
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: performance_indicators
        purpose: "Extract performance indicators"
        confidence_expected: 0.85

      - step: 3
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: BayesianEvidenceScorerAdapter
        method: score_evidence_strength
        args:
          - name: evidence
            type: List[Dict]
            source: monitoring_evidence
        returns:
          type: Dict
          binding: evidence_scores
        purpose: "Score strength of monitoring evidence"
        confidence_expected: 0.80

      - step: 4
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _calculate_global_semantic_coherence
        args: []
        returns:
          type: float
          binding: monitoring_coherence
        purpose: "Calculate coherence of monitoring framework"
        confidence_expected: 0.75

    aggregation:
      strategy: monitoring_assessment
      weights:
        monitoring_indicators: 0.30
        performance_indicators: 0.30
        evidence_scores: 0.25
        monitoring_coherence: 0.15
      confidence_threshold: 0.77

# ==============================================================================
# DIMENSION D3: PRODUCTOS (Resultados Intermedios, Entregables)
# ==============================================================================
D3_PRODUCTOS:
  description: "Evaluación de productos y entregables intermedios"
  question_count: 50

  # Q1: Product Specification
  Q1_Product_Specification:
    description: "Identify and specify expected products"
    execution_chain:
      - step: 1
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: identify_pdm_products
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: identified_products
        purpose: "Identify products using P-D-Q framework"
        confidence_expected: 0.85

      - step: 2
        adapter: policy_processor
        adapter_class: PolicyProcessorAdapter
        method: _extract_point_evidence
        args:
          - name: text
            type: str
            source: normalized_text
          - name: point
            type: Dict
            source: product_point
        returns:
          type: Dict
          binding: product_evidence
        purpose: "Extract evidence for product specifications"
        confidence_expected: 0.80

      - step: 3
        adapter: semantic_chunking_policy
        adapter_class: SemanticChunkingPolicyAdapter
        method: extract_causal_strength
        args:
          - name: chunk
            type: Dict
            source: product_chunk
        returns:
          type: float
          binding: product_causal_strength
        purpose: "Extract causal strength indicators"
        confidence_expected: 0.75

      - step: 4
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: validate_indicator_structure
        args:
          - name: indicators
            type: List[Dict]
            source: product_indicators
        returns:
          type: Dict
          binding: indicator_validation
        purpose: "Validate product indicator structure"
        confidence_expected: 0.85

    aggregation:
      strategy: product_identification
      weights:
        identified_products: 0.35
        product_evidence: 0.30
        product_causal_strength: 0.15
        indicator_validation: 0.20
      confidence_threshold: 0.78

  # Q2: Product-Process Linkage
  Q2_Product_Process_Link:
    description: "Validate linkages between processes and products"
    execution_chain:
      - step: 1
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: estimate_causal_effects
        args:
          - name: graph
            type: nx.DiGraph
            source: process_product_dag
        returns:
          type: List[Dict]
          binding: causal_effects
        purpose: "Estimate causal effects from processes to products"
        confidence_expected: 0.85

      - step: 2
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: trace_causal_pathway
        args:
          - name: from_node
            type: str
            source: process_node
          - name: to_node
            type: str
            source: product_node
          - name: dag
            type: nx.DiGraph
            source: causal_dag
        returns:
          type: Dict
          binding: pathway_trace
        purpose: "Trace pathway from process to product"
        confidence_expected: 0.80

      - step: 3
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _detect_logical_incompatibilities
        args: []
        returns:
          type: List[Dict]
          binding: logical_conflicts
        purpose: "Detect logical conflicts in linkages"
        confidence_expected: 0.75

      - step: 4
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: calculate_semantic_similarity
        args:
          - name: embedding1
            type: np.ndarray
            source: process_embedding
          - name: embedding2
            type: np.ndarray
            source: product_embedding
        returns:
          type: float
          binding: semantic_linkage
        purpose: "Calculate semantic similarity between process and product"
        confidence_expected: 0.85

    aggregation:
      strategy: linkage_validation
      weights:
        causal_effects: 0.35
        pathway_trace: 0.30
        logical_conflicts: 0.15
        semantic_linkage: 0.20
      confidence_threshold: 0.80

# ==============================================================================
# DIMENSION D4: RESULTADOS (Outcomes, Cambios Esperados)
# ==============================================================================
D4_RESULTADOS:
  description: "Evaluación de resultados esperados y outcomes"
  question_count: 50

  # Q1: Outcome Identification
  Q1_Outcome_Identification:
    description: "Identify and specify expected outcomes"
    execution_chain:
      - step: 1
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: identify_pdm_outcomes
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: identified_outcomes
        purpose: "Identify outcomes using P-D-Q notation"
        confidence_expected: 0.85

      - step: 2
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: analyze_outcome_indicators
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: Dict
          binding: outcome_analysis
        purpose: "Analyze outcome indicators"
        confidence_expected: 0.80

      - step: 3
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: generate_counterfactuals
        args:
          - name: graph
            type: nx.DiGraph
            source: outcome_dag
          - name: effects
            type: List[Dict]
            source: causal_effects
        returns:
          type: List[Dict]
          binding: counterfactual_scenarios
        purpose: "Generate counterfactual outcome scenarios"
        confidence_expected: 0.75

      - step: 4
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: identify_outcome_indicators
        args:
          - name: text
            type: str
            source: normalized_text
        returns:
          type: List[Dict]
          binding: beach_outcome_indicators
        purpose: "Identify outcome indicators using Beach framework"
        confidence_expected: 0.85

    aggregation:
      strategy: outcome_synthesis
      weights:
        identified_outcomes: 0.30
        outcome_analysis: 0.25
        counterfactual_scenarios: 0.20
        beach_outcome_indicators: 0.25
      confidence_threshold: 0.78

  # Q2: Outcome Measurement
  Q2_Outcome_Measurement:
    description: "Assess outcome measurement framework"
    execution_chain:
      - step: 1
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: validate_measurement_framework
        args:
          - name: indicators
            type: List[Dict]
            source: outcome_indicators
        returns:
          type: Dict
          binding: measurement_validation
        purpose: "Validate outcome measurement framework"
        confidence_expected: 0.85

      - step: 2
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: validate_numerical_consistency
        args:
          - name: claims
            type: List[Dict]
            source: numerical_outcomes
        returns:
          type: Dict
          binding: numerical_validation
        purpose: "Validate numerical consistency in outcomes"
        confidence_expected: 0.85

      - step: 3
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: BayesianEngineAdapter
        method: calculate_bayesian_confidence
        args:
          - name: priors
            type: Dict
            source: outcome_priors
          - name: evidence
            type: List
            source: measurement_evidence
        returns:
          type: Dict
          binding: measurement_confidence
        purpose: "Calculate Bayesian confidence in measurements"
        confidence_expected: 0.80

      - step: 4
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _calculate_confidence_interval
        args:
          - name: contradictions
            type: List
            source: measurement_conflicts
        returns:
          type: Tuple
          binding: confidence_interval
        purpose: "Calculate confidence interval for measurements"
        confidence_expected: 0.85

    aggregation:
      strategy: measurement_assessment
      weights:
        measurement_validation: 0.30
        numerical_validation: 0.25
        measurement_confidence: 0.25
        confidence_interval: 0.20
      confidence_threshold: 0.82

# ==============================================================================
# DIMENSION D5: CAUSALIDAD (Lógica Causal, Teoría de Cambio)
# ==============================================================================
D5_CAUSALIDAD:
  description: "Evaluación de la lógica causal y teoría de cambio"
  question_count: 50

  # Q1: Causal Model Construction
  Q1_Causal_Model:
    description: "Construct and validate causal model"
    execution_chain:
      - step: 1
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: construct_causal_dag
        args:
          - name: text
            type: str
            source: normalized_text
          - name: indicators
            type: List
            source: all_indicators
        returns:
          type: nx.DiGraph
          binding: complete_causal_dag
        purpose: "Construct complete causal DAG"
        confidence_expected: 0.85

      - step: 2
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: construct_causal_graph
        args:
          - name: mechanisms
            type: List[Dict]
            source: identified_mechanisms
        returns:
          type: nx.DiGraph
          binding: beach_causal_graph
        purpose: "Construct causal graph using Beach methodology"
        confidence_expected: 0.85

      - step: 3
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: construct_causal_dag
        args:
          - name: text
            type: str
            source: normalized_text
          - name: indicators
            type: List
            source: pdet_indicators
        returns:
          type: nx.DiGraph
          binding: financial_causal_dag
        purpose: "Construct financial causal DAG"
        confidence_expected: 0.80

      - step: 4
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: validate_dag_structure
        args:
          - name: dag
            type: nx.DiGraph
            source: complete_causal_dag
        returns:
          type: Dict
          binding: dag_validation
        purpose: "Validate DAG structure and properties"
        confidence_expected: 0.90

    aggregation:
      strategy: causal_model_synthesis
      weights:
        complete_causal_dag: 0.35
        beach_causal_graph: 0.30
        financial_causal_dag: 0.20
        dag_validation: 0.15
      confidence_threshold: 0.85

  # Q2: Causal Effect Estimation
  Q2_Causal_Effects:
    description: "Estimate causal effects and strengths"
    execution_chain:
      - step: 1
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: estimate_causal_effects
        args:
          - name: graph
            type: nx.DiGraph
            source: complete_causal_dag
        returns:
          type: List[Dict]
          binding: estimated_effects
        purpose: "Estimate all causal effects in DAG"
        confidence_expected: 0.85

      - step: 2
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: calculate_mechanism_strength
        args:
          - name: mechanism
            type: Dict
            source: causal_mechanism
        returns:
          type: float
          binding: mechanism_strength
        purpose: "Calculate individual mechanism strength"
        confidence_expected: 0.80

      - step: 3
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: estimate_causal_effects
        args:
          - name: graph
            type: nx.DiGraph
            source: financial_causal_dag
        returns:
          type: List[Dict]
          binding: financial_effects
        purpose: "Estimate financial causal effects"
        confidence_expected: 0.80

      - step: 4
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: sensitivity_analysis
        args:
          - name: effects
            type: List[Dict]
            source: estimated_effects
        returns:
          type: Dict
          binding: sensitivity_results
        purpose: "Perform sensitivity analysis on causal effects"
        confidence_expected: 0.85

    aggregation:
      strategy: effect_estimation_synthesis
      weights:
        estimated_effects: 0.35
        mechanism_strength: 0.25
        financial_effects: 0.20
        sensitivity_results: 0.20
      confidence_threshold: 0.82

  # Q3: Assumption Testing
  Q3_Assumption_Testing:
    description: "Test causal assumptions and identify confounders"
    execution_chain:
      - step: 1
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: identify_confounders
        args:
          - name: source
            type: str
            source: cause_variable
          - name: target
            type: str
            source: effect_variable
          - name: graph
            type: nx.DiGraph
            source: complete_causal_dag
        returns:
          type: List
          binding: identified_confounders
        purpose: "Identify potential confounding variables"
        confidence_expected: 0.80

      - step: 2
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: test_causal_assumptions
        args:
          - name: mechanism
            type: Dict
            source: causal_mechanism
          - name: evidence
            type: List[Dict]
            source: empirical_evidence
        returns:
          type: Dict
          binding: assumption_tests
        purpose: "Test causal assumptions against evidence"
        confidence_expected: 0.85

      - step: 3
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _has_logical_conflict
        args:
          - name: stmt1
            type: Dict
            source: assumption1
          - name: stmt2
            type: Dict
            source: assumption2
        returns:
          type: bool
          binding: assumption_conflict
        purpose: "Check for logical conflicts in assumptions"
        confidence_expected: 0.90

      - step: 4
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: BayesianEngineAdapter
        method: update_with_evidence
        args:
          - name: hypothesis
            type: Dict
            source: causal_hypothesis
          - name: evidence
            type: List
            source: new_evidence
        returns:
          type: Dict
          binding: updated_belief
        purpose: "Update causal beliefs with new evidence"
        confidence_expected: 0.85

    aggregation:
      strategy: assumption_validation
      weights:
        identified_confounders: 0.25
        assumption_tests: 0.35
        assumption_conflict: 0.20
        updated_belief: 0.20
      confidence_threshold: 0.80

# ==============================================================================
# DIMENSION D6: EVIDENCIA (Fuentes, Calidad, Trazabilidad)
# ==============================================================================
D6_EVIDENCIA:
  description: "Evaluación de evidencia, fuentes y trazabilidad"
  question_count: 50

  # Q1: Evidence Collection
  Q1_Evidence_Collection:
    description: "Collect and catalog evidence sources"
    execution_chain:
      - step: 1
        adapter: policy_processor
        adapter_class: PolicyProcessorAdapter
        method: _construct_evidence_bundle
        args:
          - name: matches
            type: List
            source: pattern_matches
          - name: point
            type: Dict
            source: evidence_point
        returns:
          type: EvidenceBundle
          binding: evidence_bundle
        purpose: "Construct evidence bundle from matches"
        confidence_expected: 0.85

      - step: 2
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: BayesianEvidenceScorerAdapter
        method: score_evidence_strength
        args:
          - name: evidence
            type: List[Dict]
            source: collected_evidence
        returns:
          type: Dict
          binding: evidence_strength_scores
        purpose: "Score strength of collected evidence"
        confidence_expected: 0.85

      - step: 3
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: collect_empirical_evidence
        args:
          - name: text
            type: str
            source: normalized_text
          - name: mechanism
            type: Dict
            source: target_mechanism
        returns:
          type: List[Dict]
          binding: empirical_evidence
        purpose: "Collect empirical evidence for mechanisms"
        confidence_expected: 0.80

      - step: 4
        adapter: semantic_chunking_policy
        adapter_class: SemanticChunkingPolicyAdapter
        method: bayesian_evidence_integration
        args:
          - name: chunks
            type: List[Dict]
            source: evidence_chunks
        returns:
          type: Dict
          binding: integrated_evidence
        purpose: "Integrate evidence using Bayesian methods"
        confidence_expected: 0.85

    aggregation:
      strategy: evidence_consolidation
      weights:
        evidence_bundle: 0.25
        evidence_strength_scores: 0.30
        empirical_evidence: 0.25
        integrated_evidence: 0.20
      confidence_threshold: 0.82

  # Q2: Evidence Quality Assessment
  Q2_Evidence_Quality:
    description: "Assess quality and reliability of evidence"
    execution_chain:
      - step: 1
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: BayesianEvidenceScorerAdapter
        method: calculate_evidence_weight
        args:
          - name: evidence_type
            type: str
            source: evidence_category
          - name: quality_indicators
            type: Dict
            source: quality_metrics
        returns:
          type: float
          binding: evidence_weight
        purpose: "Calculate evidence weight based on quality"
        confidence_expected: 0.85

      - step: 2
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: assess_evidence_quality
        args:
          - name: evidence
            type: Dict
            source: evidence_item
        returns:
          type: Dict
          binding: quality_assessment
        purpose: "Assess evidence quality using Beach criteria"
        confidence_expected: 0.85

      - step: 3
        adapter: policy_processor
        adapter_class: PolicyProcessorAdapter
        method: compute_evidence_score
        args:
          - name: matches
            type: List
            source: evidence_matches
          - name: context
            type: str
            source: evidence_context
        returns:
          type: float
          binding: evidence_score
        purpose: "Compute overall evidence score"
        confidence_expected: 0.85

      - step: 4
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _calculate_contradiction_entropy
        args: []
        returns:
          type: float
          binding: evidence_entropy
        purpose: "Calculate entropy as evidence quality indicator"
        confidence_expected: 0.80

    aggregation:
      strategy: quality_weighted_average
      weights:
        evidence_weight: 0.30
        quality_assessment: 0.30
        evidence_score: 0.25
        evidence_entropy: 0.15
      confidence_threshold: 0.83

  # Q3: Evidence Traceability
  Q3_Evidence_Traceability:
    description: "Establish evidence traceability and linkages"
    execution_chain:
      - step: 1
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: FinancialTraceAdapter
        method: trace_financial_flows
        args:
          - name: allocations
            type: List[Dict]
            source: budget_allocations
        returns:
          type: Dict
          binding: financial_trace
        purpose: "Trace financial evidence flows"
        confidence_expected: 0.85

      - step: 2
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: trace_causal_pathway
        args:
          - name: from_node
            type: str
            source: evidence_source
          - name: to_node
            type: str
            source: evidence_target
          - name: dag
            type: nx.DiGraph
            source: evidence_dag
        returns:
          type: Dict
          binding: causal_trace
        purpose: "Trace causal pathways in evidence"
        confidence_expected: 0.85

      - step: 3
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _identify_dependencies
        args:
          - name: statement
            type: Dict
            source: evidence_statement
        returns:
          type: List[str]
          binding: evidence_dependencies
        purpose: "Identify evidence dependencies"
        confidence_expected: 0.80

      - step: 4
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: trace_numerical_chain
        args:
          - name: claims
            type: List[Dict]
            source: numerical_evidence
        returns:
          type: List[Dict]
          binding: numerical_trace
        purpose: "Trace chain of numerical evidence"
        confidence_expected: 0.85

    aggregation:
      strategy: traceability_synthesis
      weights:
        financial_trace: 0.30
        causal_trace: 0.30
        evidence_dependencies: 0.20
        numerical_trace: 0.20
      confidence_threshold: 0.83

  # Q4: Cross-Evidence Validation
  Q4_Cross_Validation:
    description: "Validate evidence across multiple sources"
    execution_chain:
      - step: 1
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: detect
        args:
          - name: document
            type: str
            source: normalized_text
          - name: metadata
            type: dict
            value: {"analysis_type": "evidence_validation"}
        returns:
          type: Dict
          binding: evidence_contradictions
        purpose: "Detect contradictions in evidence"
        confidence_expected: 0.85

      - step: 2
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: BayesianEngineAdapter
        method: triangulate_evidence
        args:
          - name: sources
            type: List[Dict]
            source: evidence_sources
        returns:
          type: Dict
          binding: triangulated_evidence
        purpose: "Triangulate evidence from multiple sources"
        confidence_expected: 0.85

      - step: 3
        adapter: embedding_policy
        adapter_class: EmbeddingPolicyAdapter
        method: cross_validate_embeddings
        args:
          - name: embeddings
            type: List[np.ndarray]
            source: evidence_embeddings
        returns:
          type: Dict
          binding: embedding_validation
        purpose: "Cross-validate semantic embeddings"
        confidence_expected: 0.85

      - step: 4
        adapter: dereck_beach
        adapter_class: DerekBeachAdapter
        method: cross_validate_mechanisms
        args:
          - name: mechanisms
            type: List[Dict]
            source: identified_mechanisms
        returns:
          type: Dict
          binding: mechanism_validation
        purpose: "Cross-validate causal mechanisms"
        confidence_expected: 0.85

    aggregation:
      strategy: cross_validation_consensus
      weights:
        evidence_contradictions: 0.25
        triangulated_evidence: 0.30
        embedding_validation: 0.20
        mechanism_validation: 0.25
      confidence_threshold: 0.85

  # Q5: Evidence-Based Recommendations
  Q5_Evidence_Recommendations:
    description: "Generate evidence-based recommendations"
    execution_chain:
      - step: 1
        adapter: contradiction_detection
        adapter_class: ContradictionDetectionAdapter
        method: _generate_resolution_recommendations
        args:
          - name: contradictions
            type: List
            source: identified_contradictions
        returns:
          type: List[Dict]
          binding: resolution_recommendations
        purpose: "Generate recommendations to resolve contradictions"
        confidence_expected: 0.75

      - step: 2
        adapter: financial_viability
        adapter_class: FinancialViabilityAdapter
        method: generate_executive_report
        args:
          - name: analysis_results
            type: Dict
            source: complete_analysis
        returns:
          type: Dict
          binding: executive_report
        purpose: "Generate executive report with recommendations"
        confidence_expected: 0.85

      - step: 3
        adapter: teoria_cambio
        adapter_class: ModulosAdapter
        sub_adapter: CausalAnalysisAdapter
        method: generate_counterfactuals
        args:
          - name: graph
            type: nx.DiGraph
            source: evidence_dag
          - name: effects
            type: List[Dict]
            source: causal_effects
        returns:
          type: List[Dict]
          binding: evidence_scenarios
        purpose: "Generate evidence-based counterfactual scenarios"
        confidence_expected: 0.80

      - step: 4
        adapter: analyzer_one
        adapter_class: AnalyzerOneAdapter
        method: generate_recommendations
        args:
          - name: analysis_results
            type: Dict
            source: complete_results
        returns:
          type: List[str]
          binding: strategic_recommendations
        purpose: "Generate strategic recommendations"
        confidence_expected: 0.80

    aggregation:
      strategy: recommendation_synthesis
      weights:
        resolution_recommendations: 0.25
        executive_report: 0.30
        evidence_scenarios: 0.20
        strategic_recommendations: 0.25
      confidence_threshold: 0.78

# ==============================================================================
# EXECUTION METADATA
# ==============================================================================
execution_metadata:
  total_dimensions: 6
  total_questions: 300  # 6 dimensions × 50 questions each
  total_execution_chains: 300
  estimated_method_calls_per_question: 4
  total_estimated_method_calls: 1200
  
  adapters_used: 9
  methods_available: 413
  
  confidence_thresholds:
    minimum: 0.65
    average: 0.78
    recommended: 0.80
    high_quality: 0.85
  
  execution_modes:
    - sequential
    - parallel_safe
    - async_capable
    - batch_processing
  
  output_formats:
    - json
    - dict
    - ModuleResult
    - custom_dataclass

# ==============================================================================
# VALIDATION RULES
# ==============================================================================
validation_rules:
  adapter_availability:
    check: "Verify adapter.available == True before execution"
    fallback: "Use BaseAdapter._create_unavailable_result()"
  
  method_existence:
    check: "Verify method exists in adapter class"
    fallback: "Return error ModuleResult"
  
  argument_validation:
    check: "Validate argument types match method signature"
    fallback: "Use type coercion or return error"
  
  result_format:
    check: "All results must be ModuleResult dataclass"
    enforcement: "strict"
  
  confidence_scoring:
    check: "All results must include confidence score 0.0-1.0"
    enforcement: "strict"
  
  evidence_tracking:
    check: "All results must include evidence list"
    enforcement: "recommended"

# ==============================================================================
# USAGE NOTES
# ==============================================================================
usage_notes: |
  This questionnaire maps ALL 300 questions (6 dimensions × 50 questions) to
  specific methods in the 9 complete adapters.
  
  ADAPTER REGISTRY:
  - teoria_cambio: ModulosAdapter (51 methods, 5 sub-adapters)
  - analyzer_one: AnalyzerOneAdapter (39 methods)
  - dereck_beach: DerekBeachAdapter (89 methods)
  - embedding_policy: EmbeddingPolicyAdapter (37 methods)
  - semantic_chunking_policy: SemanticChunkingPolicyAdapter (18 methods)
  - contradiction_detection: ContradictionDetectionAdapter (52 methods)
  - financial_viability: FinancialViabilityAdapter (60 methods, 20 implemented)
  - policy_processor: PolicyProcessorAdapter (34 methods)
  - policy_segmenter: PolicySegmenterAdapter (33 methods)
  
  EXECUTION FLOW:
  1. Load adapters via ModuleAdapterRegistry
  2. For each question, execute the execution_chain sequentially
  3. Each step calls adapter.execute(method_name, args, kwargs)
  4. Aggregate results using specified strategy and weights
  5. Apply confidence threshold to determine question status
  
  NOTES:
  - All method names are verified against actual implementations
  - Sub-adapter methods accessible via ModulosAdapter routing
  - Financial viability adapter partially implemented (20/60 methods)
  - Cross-dimensional questions may require multiple dimension chains
  - Async execution supported where marked async: true