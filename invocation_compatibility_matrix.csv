Orchestrator File,Line Number,Caller Function,Target Module/Method,Expected Signature,Actual Signature,Status,Recommended Remediation
choreographer.py,361,_execute_single_step,module_adapter_registry.execute_module_method,"args=[adapter_name, method_name, args, kwargs]","(module_name: str, method_name: str, args: List[Any], kwargs: Dict[str, Any]) -> ModuleResult",OK,Signature compatible - all parameters match adapter interface
core_orchestrator.py,130,analyze_single_plan,choreographer.execute_question_chain,"args=[question_spec, plan_text, module_adapter_registry, circuit_breaker]","(question_spec, plan_text: str, module_adapter_registry, circuit_breaker=None) -> Dict[str, ExecutionResult]",OK,Signature compatible - all arguments match expected parameters
core_orchestrator.py,145,analyze_single_plan,report_assembler.generate_micro_answer,"args=[question_spec, execution_results, plan_text]","(question_spec, execution_results: Dict[str, Any], plan_text: str) -> MicroLevelAnswer",OK,Signature compatible - all arguments match expected parameters
core_orchestrator.py,156,analyze_single_plan,report_assembler.generate_macro_convergence,"kwargs={all_micro_answers=micro_answers, all_meso_clusters=meso_clusters, plan_metadata={...}}","(all_micro_answers: List, all_meso_clusters: List, plan_metadata: Dict[str, Any]) -> MacroLevelConvergence",MISMATCH,Parameter name inconsistency: local variable 'micro_answers' passed to 'all_micro_answers'. Works with keyword args but consider renaming for consistency.
core_orchestrator.py,165,analyze_single_plan,report_assembler.export_report,"kwargs={micro_answers=..., meso_clusters=..., macro_convergence=..., output_path=report_path}","(micro_answers: List, meso_clusters: List, macro_convergence, output_path: Path) -> None",MISMATCH,Parameter name inconsistency: local variable 'report_path' passed to 'output_path'. Works with keyword args but consider renaming for consistency.
core_orchestrator.py,225,_generate_meso_clusters,report_assembler.generate_meso_cluster,"kwargs={cluster_name=..., cluster_description=..., micro_answers=answers, cluster_definition={...}}","(cluster_name: str, cluster_description: str, micro_answers: List, cluster_definition: Dict[str, Any]) -> MesoLevelCluster",MISMATCH,Parameter name inconsistency: loop variable 'answers' passed to 'micro_answers'. Works with keyword args but consider using 'micro_answers_subset' for clarity.
circuit_breaker.py,N/A,record_success,<internal>,"args=[adapter_name, execution_time]","(adapter_name: str, execution_time: float = 0.0) -> None",OK,Internal method - signature compatible
circuit_breaker.py,N/A,record_failure,<internal>,"args=[adapter_name, error, execution_time, severity]","(adapter_name: str, error: str, execution_time: float = 0.0, severity: FailureSeverity = ...) -> None",OK,Internal method - signature compatible
report_assembly.py,N/A,_apply_scoring_modality,<internal>,"args=[question_spec, execution_results, plan_text]","(question_spec, execution_results: Dict[str, Any], plan_text: str) -> Tuple[float, Dict[str, bool], Dict[str, Any]]",OK,Internal method - signature compatible
report_assembly.py,N/A,_extract_evidence_excerpts,<internal>,"args=[question_spec, execution_results, elements_found, plan_text, max_excerpts]","(question_spec, execution_results: Dict[str, Any], elements_found: Dict[str, bool], plan_text: str, max_excerpts: int = 5) -> List[str]",OK,Internal method - signature compatible
report_assembly.py,N/A,_generate_explanation,<internal>,"args=[question_spec, score, qualitative, elements_found, execution_results, evidence_excerpts]","(question_spec, score: float, qualitative: str, elements_found: Dict[str, bool], execution_results: Dict[str, Any], evidence_excerpts: List[str]) -> str",OK,Internal method - signature compatible
