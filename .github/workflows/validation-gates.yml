name: CI/CD Validation Gates

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  validation-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyyaml networkx flask jsonschema
        
    - name: Run Full Validation Pipeline
      run: |
        python3 cicd/run_pipeline.py
        
    - name: Upload Validation Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: validation-results
        path: |
          validation_results.json
        retention-days: 30
        
    - name: Comment PR with Results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('validation_results.json', 'utf8'));
          
          let body = '## 🏥 CI/CD Validation Gates Results\n\n';
          body += `**Status**: ${results.success ? '✅ PASSED' : '❌ FAILED'}\n`;
          body += `**Gates Passed**: ${results.passed_gates}/${results.total_gates}\n`;
          body += `**Execution Time**: ${results.execution_time.toFixed(2)}s\n\n`;
          body += '### Gate Results\n\n';
          
          for (const result of results.results) {
            const icon = result.passed ? '✅' : '❌';
            body += `${icon} **${result.gate_name}**: ${result.status}\n`;
            
            if (result.errors && result.errors.length > 0) {
              body += '  - Errors:\n';
              for (const error of result.errors) {
                body += `    - ${error}\n`;
              }
            }
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
